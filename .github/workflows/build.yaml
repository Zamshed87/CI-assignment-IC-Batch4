name: CI - Build, Scan, Test, Lint

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: true

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      changed_services: ${{ steps.set-matrix.outputs.services }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - id: set-matrix
        run: |
          changed_files=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})
          echo "Changed files:"
          echo "$changed_files"

          services=""
          for service in api worker; do
            if echo "$changed_files" | grep -q "^$service/"; then
              services="$services\"$service\","
            fi
          done

          # Remove trailing comma and wrap in brackets
          services="[${services%,}]"
          echo "services=$services" >> $GITHUB_OUTPUT

  build-and-test:
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.changed_services != '[]' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: ${{ fromJson(needs.detect-changes.outputs.changed_services) }}
        python-version: ["3.11"]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r ${{ matrix.service }}/requirements.txt
          if [ -f "${{ matrix.service }}/requirements-dev.txt" ]; then
            pip install -r ${{ matrix.service }}/requirements-dev.txt
          fi

      - name: Run flake8
        run: flake8 --config=.flake8 ${{ matrix.service }}

      - name: Run black check
        run: black --check --diff ${{ matrix.service }}

      - name: Run mypy
        run: mypy --config-file=mypy.ini ${{ matrix.service }}

      - name: Run isort check
        run: isort --check-only --diff ${{ matrix.service }}

      - name: Run unit tests
        run: |
          pytest --cov=${{ matrix.service }} --cov-report=xml ${{ matrix.service }}/tests
        continue-on-error: true

      - name: Upload code coverage
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: ${{ matrix.service }}

      - name: Docker build
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          tags: ${{ matrix.service }}:latest
          load: true

      - name: Trivy CVE image scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ matrix.service }}:latest
          format: 'sarif'
          output: trivy-${{ matrix.service }}.sarif

      - name: Upload Trivy SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-${{ matrix.service }}.sarif

      - name: Trivy Dockerfile scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: config
          format: table
          exit-code: '1'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true
          input: ./${{ matrix.service }}/Dockerfile

      - name: Upload artifact for deploy
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.service }}-artifact
          path: ./${{ matrix.service }}
